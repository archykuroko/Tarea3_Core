@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>

    <!-- Agregar Bootstrap -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link href="~/css/site.css" rel="stylesheet" />

    <!-- Agregar FontAwesome para iconos -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
</head>
<body id="body" class="light-mode">

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="@Url.Action("Index", "Home")">
                <i class="fas fa-home"></i> Proyecto Individual
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Index", "Home")">
                            <i class="fas fa-home"></i> Inicio
                        </a>
                    </li>

                    @{
                        // Accediendo a las variables dentro del layout usando HttpContextAccessor
                        var usuarioNombre = HttpContextAccessor.HttpContext.Session.GetString("UsuarioNombre");
                        var rolId = HttpContextAccessor.HttpContext.Session.GetInt32("RolId");
                    }

                    @if (rolId.HasValue && rolId == 1)
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Index", "Admin")">
                                <i class="fas fa-users-cog"></i> Gestión de Usuarios
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Create", "Admin")">
                                <i class="fas fa-user-plus"></i> Nuevo Usuario
                            </a>
                        </li>
                    }

                    @if (!string.IsNullOrEmpty(usuarioNombre))
                    {
                        <!-- Botón "Mi Perfil" para cualquier usuario autenticado -->
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Profile", "Profile")">
                                <i class="fas fa-user"></i> Mi Perfil
                            </a>
                        </li>
                    }

                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("CheckDatabase", "Health")">
                            <i class="fas fa-database"></i> Estado BD
                        </a>
                    </li>

                    <!-- Botón de búsqueda de libros -->
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Index", "Book")">
                            <i class="fas fa-book"></i> Buscar Libros
                        </a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link text-danger" href="@Url.Action("Logout", "Auth")">
                            <i class="fas fa-sign-out-alt"></i> Cerrar sesión
                        </a>
                    </li>

                    <!-- Botón de cambio de modo -->
                    <li class="nav-item">
                        <a class="nav-link" href="javascript:void(0)" id="theme-toggle">
                            <i class="fas fa-moon" id="theme-icon"></i> <!-- Icono para el tema -->
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        @RenderBody()
    </div>

    <!-- Agregar Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Script para cambiar el modo -->
    <script>
        // Función para cambiar el modo entre claro y oscuro
        const themeToggleButton = document.getElementById('theme-toggle');
        const body = document.getElementById('body');
        const themeIcon = document.getElementById('theme-icon');

        // Revisar si el usuario ya tiene preferencia guardada
        const currentTheme = localStorage.getItem('theme') || 'light-mode';
        body.classList.add(currentTheme); // Aplica el tema guardado
        if (currentTheme === 'dark-mode') {
            themeIcon.classList.remove('fa-moon');
            themeIcon.classList.add('fa-sun');
        }

        themeToggleButton.addEventListener('click', function () {
            const isDarkMode = body.classList.contains('dark-mode');

            // Alternar entre los modos claro y oscuro
            if (isDarkMode) {
                body.classList.remove('dark-mode');
                body.classList.add('light-mode');
                themeIcon.classList.remove('fa-sun');
                themeIcon.classList.add('fa-moon');
                localStorage.setItem('theme', 'light-mode'); // Guardar preferencia
            } else {
                body.classList.remove('light-mode');
                body.classList.add('dark-mode');
                themeIcon.classList.remove('fa-moon');
                themeIcon.classList.add('fa-sun');
                localStorage.setItem('theme', 'dark-mode'); // Guardar preferencia
            }
        });
    </script>

</body>
</html>
